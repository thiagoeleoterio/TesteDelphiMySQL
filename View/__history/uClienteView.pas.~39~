unit uClienteView;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.Mask,
  Vcl.Buttons, Data.DB, Vcl.Grids, Vcl.DBGrids, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, uClienteModel;

type
  TfrmClienteView = class(TForm)
    pnlPesquisa: TPanel;
    pnlBotoes: TPanel;
    btnConfirmar: TBitBtn;
    btnCancelar: TBitBtn;
    EdtPesquisarCliente: TLabeledEdit;
    grdCliente: TDBGrid;
    dssCliente: TDataSource;
    fdmCliente: TFDMemTable;
    fdmClienteidCliente: TIntegerField;
    fdmClienteNome: TStringField;
    fdmClienteCidade: TStringField;
    fdmClienteUF: TStringField;
    lblLegenda: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnConfirmarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure EdtPesquisarClienteKeyPress(Sender: TObject; var Key: Char);
    procedure EdtPesquisarClienteKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure grdClienteKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
  private
    { Private declarations }
    FClienteEscolhido: Integer;
    procedure ObterClientes(const NomeParcial: String);
    procedure FecharFormulario(ClienteEscolhido: Integer = -1);
  public
    { Public declarations }
    property ClienteEscolhido: Integer read FClienteEscolhido;
  end;

var
  frmClienteView: TfrmClienteView;

implementation

uses
  System.Generics.Collections, uClienteController;

{$R *.dfm}

{ TfrmClienteView }

procedure TfrmClienteView.btnCancelarClick(Sender: TObject);
begin
  FecharFormulario;
end;

procedure TfrmClienteView.btnConfirmarClick(Sender: TObject);
begin
  if (fdmCliente.State = dsBrowse) and (fdmCliente.RecordCount > 0) then
    FecharFormulario(fdmCliente.FieldByName('IDCliente').AsInteger)
  else
    FecharFormulario;
end;

procedure TfrmClienteView.EdtPesquisarClienteKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
  if Key = VK_RETURN then
  begin
    if fdmCliente.RecordCount = 1 then
      btnConfirmar.Click
    else
      grdCliente.SetFocus;
  end;
end;

procedure TfrmClienteView.EdtPesquisarClienteKeyPress(Sender: TObject;
  var Key: Char);
begin
  if Length(EdtPesquisarCliente.Text) > 1 then
    ObterClientes(EdtPesquisarCliente.Text);
end;

procedure TfrmClienteView.FormCreate(Sender: TObject);
begin
  fdmCliente.CreateDataSet;
end;

procedure TfrmClienteView.FormDestroy(Sender: TObject);
begin
  FreeAndNil(fdmCliente);
end;

procedure TfrmClienteView.grdClienteKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if VK_RETURN then
  begin
    if fdmCliente.RecordCount > 0 then
      btnConfirmar.Click
  end;
end;

procedure TfrmClienteView.ObterClientes(const NomeParcial: String);
var
  ClienteController: TClienteController;
  Clientes: TObjectList<TCliente>;
  Cliente: TCliente;
begin
  ClienteController := TClienteController.Create;
  try
    Clientes := ClienteController.ObterClientesPorNomeParcial(NomeParcial);
    fdmCliente.EmptyDataSet;

    for Cliente in Clientes do
    begin
      fdmCliente.Append;
      fdmCliente.FieldByName('IDCliente').AsInteger := Cliente.IDCliente;
      fdmCliente.FieldByName('Nome').AsString := Cliente.Nome;
      fdmCliente.FieldByName('Cidade').AsString := Cliente.Cidade;
      fdmCliente.FieldByName('UF').AsString := Cliente.UF;
      fdmCliente.Post;
    end;
  finally
    FreeAndNil(ClienteController);
  end;
end;

procedure TfrmClienteView.FecharFormulario(ClienteEscolhido: Integer);
begin
  FClienteEscolhido := ClienteEscolhido;
  Close;
end;

end.
